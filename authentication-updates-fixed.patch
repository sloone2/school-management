From 7576dccc95b8292b6ea36420e3bc782eafb6e850 Mon Sep 17 00:00:00 2001
From: Developer <developer@example.com>
Date: Mon, 14 Jul 2025 13:21:00 -0400
Subject: [PATCH 1/2] feat: Update authentication system

- Remove loginAsStudent field from login process
- Restrict public registration to STUDENT and PARENT types only
- Add email field to registration (already existed)
- Create axios instance with JWT interceptor for API calls
- Integrate frontend login/register components with backend API
- Add comprehensive form validation and error handling
- Add user type selection in registration form
- Update API documentation to reflect changes

Backend changes:
- Modified LoginDto to remove loginAsStudent field
- Updated RegisterDto with PublicUserType enum (STUDENT/PARENT only)
- Removed loginParentAsStudent method from AuthService
- Updated login method to remove parent-as-student logic
- Updated API documentation in AuthController

Frontend changes:
- Added axios dependency and created ApiService with JWT interceptor
- Updated LoginComponent with reactive forms and API integration
- Updated RegisterComponent with comprehensive form including user type selection
- Added proper form validation and error handling
- Added conditional fields based on user type (student/parent specific fields)
---
 backend/src/auth/auth.controller.ts           |   4 +-
 backend/src/auth/auth.service.ts              |  74 +---
 backend/src/auth/dto/login.dto.ts             |  12 +-
 backend/src/auth/dto/register.dto.ts          |  55 +--
 frontend/package-lock.json                    |  79 +++-
 frontend/package.json                         |   1 +
 .../src/app/auth/login/login.component.html   |  51 ++-
 .../src/app/auth/login/login.component.ts     | 160 ++++++--
 .../app/auth/register/register.component.html | 305 ++++++++++++--
 .../app/auth/register/register.component.ts   | 385 +++++++++++++-----
 .../src/app/shared/service/api/api.service.ts | 219 ++++++++++
 todo.md                                       |  20 +
 12 files changed, 1059 insertions(+), 306 deletions(-)
 create mode 100644 frontend/src/app/shared/service/api/api.service.ts
 create mode 100644 todo.md

diff --git a/backend/src/auth/auth.controller.ts b/backend/src/auth/auth.controller.ts
index 348663a..dc55f6b 100644
--- a/backend/src/auth/auth.controller.ts
+++ b/backend/src/auth/auth.controller.ts
@@ -13,7 +13,7 @@ export class AuthController {
   @Post('login')
   @ApiOperation({ 
     summary: 'User login',
-    description: 'Authenticate user and return JWT token. Supports parent login as student.'
+    description: 'Authenticate user and return JWT token.'
   })
   @ApiResponse({ 
     status: 200, 
@@ -47,7 +47,7 @@ export class AuthController {
   @Post('register')
   @ApiOperation({ 
     summary: 'User registration',
-    description: 'Register a new user (student, parent, or staff)'
+    description: 'Register a new user (student or parent only). Staff and admin registration must be done through the admin portal.'
   })
   @ApiResponse({ 
     status: 201, 
diff --git a/backend/src/auth/auth.service.ts b/backend/src/auth/auth.service.ts
index 33d55ff..cc68192 100644
--- a/backend/src/auth/auth.service.ts
+++ b/backend/src/auth/auth.service.ts
@@ -73,18 +73,13 @@ export class AuthService {
   }
 
   async login(loginDto: LoginDto): Promise<AuthResponse> {
-    const { email, password, loginAsStudent } = loginDto;
+    const { email, password } = loginDto;
     
     const user = await this.validateUser(email, password);
     if (!user) {
       throw new UnauthorizedException('Invalid credentials');
     }
 
-    // Handle parent logging in as student
-    if (loginAsStudent && user.userType === UserType.PARENT) {
-      return this.loginParentAsStudent(user, loginAsStudent);
-    }
-
     // Handle student direct login
     if (user.userType === UserType.STUDENT) {
       const student = await this.studentRepository.findOne({
@@ -112,6 +107,16 @@ export class AuthService {
       throw new BadRequestException('User with this email already exists');
     }
 
+    // Convert PublicUserType to UserType
+    let actualUserType: UserType;
+    if (userType === 'student') {
+      actualUserType = UserType.STUDENT;
+    } else if (userType === 'parent') {
+      actualUserType = UserType.PARENT;
+    } else {
+      throw new BadRequestException('Invalid user type. Only STUDENT and PARENT are allowed for public registration.');
+    }
+
     // Hash password
     const hashedPassword = await bcrypt.hash(password, 12);
 
@@ -121,15 +126,15 @@ export class AuthService {
       password: hashedPassword,
       firstName: userData.firstName,
       lastName: userData.lastName,
-      userType,
-      role: this.getUserRoleFromType(userType),
+      userType: actualUserType,
+      role: this.getUserRoleFromType(actualUserType),
       emailVerified: false,
     });
 
     const savedUser = await this.userRepository.save(user);
 
     // Create specific user type record
-    await this.createUserTypeRecord(savedUser, userType, userData);
+    await this.createUserTypeRecord(savedUser, actualUserType, userData);
 
     // Assign default claims
     await this.claimsService.assignDefaultClaims(savedUser);
@@ -143,57 +148,6 @@ export class AuthService {
     return this.generateAuthResponse(userWithClaims);
   }
 
-  private async loginParentAsStudent(parent: User, studentId: string): Promise<AuthResponse> {
-    // Verify parent can manage this student
-    const parentRecord = await this.parentRepository.findOne({
-      where: { user: { id: parent.id } },
-      relations: ['children', 'children.user', 'children.user.claims', 'children.user.claims.claim'],
-    });
-
-    const student = parentRecord?.children.find(child => child.id === studentId);
-    if (!student) {
-      throw new UnauthorizedException('You are not authorized to access this student account');
-    }
-
-    // Create a hybrid response with parent identity but student context
-    const studentUser = student.user;
-    const parentClaims = parent.claims.map(uc => uc.claim.name);
-    const studentClaims = studentUser.claims.map(uc => uc.claim.name);
-    
-    // Combine claims (parent gets their claims + student's claims)
-    const combinedClaims = [...new Set([...parentClaims, ...studentClaims])];
-    const combinedRoutes = [...new Set([
-      ...parent.getFrontendRoutes(),
-      ...studentUser.getFrontendRoutes(),
-    ])];
-
-    const payload: JwtPayload = {
-      sub: parent.id, // Keep parent as the authenticated user
-      email: parent.email,
-      userType: UserType.PARENT,
-      role: UserRole.PARENT,
-      claims: combinedClaims,
-      frontendRoutes: combinedRoutes,
-    };
-
-    const token = this.jwtService.sign(payload);
-
-    return {
-      access_token: token,
-      user: {
-        id: parent.id,
-        email: parent.email,
-        firstName: parent.firstName,
-        lastName: parent.lastName,
-        userType: UserType.PARENT,
-        role: UserRole.PARENT,
-        claims: combinedClaims,
-        frontendRoutes: combinedRoutes,
-        canManageStudents: parentRecord.children.map(child => child.id),
-      },
-    };
-  }
-
   private async generateAuthResponse(user: User): Promise<AuthResponse> {
     const claims = user.claims
       .filter(uc => uc.isValid)
diff --git a/backend/src/auth/dto/login.dto.ts b/backend/src/auth/dto/login.dto.ts
index 9cfcb70..7a318a5 100644
--- a/backend/src/auth/dto/login.dto.ts
+++ b/backend/src/auth/dto/login.dto.ts
@@ -1,5 +1,5 @@
-import { IsEmail, IsString, MinLength, IsOptional, IsUUID } from 'class-validator';
-import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
+import { IsEmail, IsString, MinLength } from 'class-validator';
+import { ApiProperty } from '@nestjs/swagger';
 
 export class LoginDto {
   @ApiProperty({
@@ -17,13 +17,5 @@ export class LoginDto {
   @IsString()
   @MinLength(6)
   password: string;
-
-  @ApiPropertyOptional({
-    example: 'uuid-of-student',
-    description: 'Student ID for parent login (when parent wants to access student account)',
-  })
-  @IsOptional()
-  @IsUUID()
-  loginAsStudent?: string;
 }
 
diff --git a/backend/src/auth/dto/register.dto.ts b/backend/src/auth/dto/register.dto.ts
index dcb4071..156624b 100644
--- a/backend/src/auth/dto/register.dto.ts
+++ b/backend/src/auth/dto/register.dto.ts
@@ -10,9 +10,14 @@ import {
 } from 'class-validator';
 import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
 import { UserType } from '../../users/entities/user.entity';
-import { StaffType } from '../../users/entities/staff.entity';
 import { ParentRelationship } from '../../users/entities/parent.entity';
 
+// Restricted user types for public registration
+export enum PublicUserType {
+  STUDENT = 'student',
+  PARENT = 'parent',
+}
+
 export class RegisterDto {
   @ApiProperty({
     example: 'user@example.com',
@@ -45,19 +50,19 @@ export class RegisterDto {
   lastName: string;
 
   @ApiProperty({
-    enum: UserType,
-    example: UserType.STUDENT,
-    description: 'Type of user',
+    enum: PublicUserType,
+    example: PublicUserType.STUDENT,
+    description: 'Type of user (only STUDENT and PARENT allowed for public registration)',
   })
-  @IsEnum(UserType)
-  userType: UserType;
+  @IsEnum(PublicUserType)
+  userType: PublicUserType;
 
   // Student-specific fields
   @ApiPropertyOptional({
     example: 'STU001',
     description: 'Student ID (required for students)',
   })
-  @ValidateIf(o => o.userType === UserType.STUDENT)
+  @ValidateIf(o => o.userType === PublicUserType.STUDENT)
   @IsString()
   studentId?: string;
 
@@ -85,40 +90,6 @@ export class RegisterDto {
   @IsBoolean()
   canLoginDirectly?: boolean;
 
-  // Staff-specific fields
-  @ApiPropertyOptional({
-    example: 'EMP001',
-    description: 'Employee ID (required for staff)',
-  })
-  @ValidateIf(o => o.userType === UserType.STAFF)
-  @IsString()
-  employeeId?: string;
-
-  @ApiPropertyOptional({
-    enum: StaffType,
-    example: StaffType.INSTRUCTOR,
-    description: 'Type of staff (required for staff)',
-  })
-  @ValidateIf(o => o.userType === UserType.STAFF)
-  @IsEnum(StaffType)
-  staffType?: StaffType;
-
-  @ApiPropertyOptional({
-    example: 'Mathematics',
-    description: 'Department (for staff)',
-  })
-  @IsOptional()
-  @IsString()
-  department?: string;
-
-  @ApiPropertyOptional({
-    example: 'Senior Teacher',
-    description: 'Position (for staff)',
-  })
-  @IsOptional()
-  @IsString()
-  position?: string;
-
   // Parent-specific fields
   @ApiPropertyOptional({
     example: '+1234567890',
@@ -133,7 +104,7 @@ export class RegisterDto {
     example: ParentRelationship.FATHER,
     description: 'Relationship to student (for parents)',
   })
-  @ValidateIf(o => o.userType === UserType.PARENT)
+  @ValidateIf(o => o.userType === PublicUserType.PARENT)
   @IsEnum(ParentRelationship)
   relationship?: ParentRelationship;
 }
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
index 347b230..b676f0b 100644
--- a/frontend/package-lock.json
+++ b/frontend/package-lock.json
@@ -22,6 +22,7 @@
         "@types/quill": "^2.0.14",
         "angular-feather": "^6.5.1",
         "aos": "^2.3.4",
+        "axios": "^1.10.0",
         "bootstrap": "^5.3.3",
         "jquery": "^3.7.1",
         "lightgallery": "^2.8.3",
@@ -6662,6 +6663,12 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
+      "license": "MIT"
+    },
     "node_modules/autoprefixer": {
       "version": "10.4.20",
       "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.20.tgz",
@@ -6700,6 +6707,17 @@
         "postcss": "^8.1.0"
       }
     },
+    "node_modules/axios": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.10.0.tgz",
+      "integrity": "sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==",
+      "license": "MIT",
+      "dependencies": {
+        "follow-redirects": "^1.15.6",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
     "node_modules/axobject-query": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
@@ -7531,6 +7549,18 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "license": "MIT",
+      "dependencies": {
+        "delayed-stream": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
     "node_modules/commander": {
       "version": "2.20.3",
       "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
@@ -8064,6 +8094,15 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
     "node_modules/depd": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
@@ -8474,6 +8513,21 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/es-set-tostringtag": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
+      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.6",
+        "has-tostringtag": "^1.0.2",
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
     "node_modules/esbuild": {
       "version": "0.25.4",
       "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.4.tgz",
@@ -9245,7 +9299,6 @@
       "version": "1.15.9",
       "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
       "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
-      "dev": true,
       "funding": [
         {
           "type": "individual",
@@ -9279,6 +9332,22 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
+    "node_modules/form-data": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.3.tgz",
+      "integrity": "sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==",
+      "license": "MIT",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "es-set-tostringtag": "^2.1.0",
+        "hasown": "^2.0.2",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/forwarded": {
       "version": "0.2.0",
       "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
@@ -11635,7 +11704,6 @@
       "version": "1.52.0",
       "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
       "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 0.6"
@@ -11645,7 +11713,6 @@
       "version": "2.1.35",
       "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
       "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "mime-db": "1.52.0"
@@ -13584,6 +13651,12 @@
         "node": ">= 0.10"
       }
     },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
+      "license": "MIT"
+    },
     "node_modules/prr": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/prr/-/prr-1.0.1.tgz",
diff --git a/frontend/package.json b/frontend/package.json
index ccdb39a..0916828 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -25,6 +25,7 @@
     "@types/quill": "^2.0.14",
     "angular-feather": "^6.5.1",
     "aos": "^2.3.4",
+    "axios": "^1.10.0",
     "bootstrap": "^5.3.3",
     "jquery": "^3.7.1",
     "lightgallery": "^2.8.3",
diff --git a/frontend/src/app/auth/login/login.component.html b/frontend/src/app/auth/login/login.component.html
index deafaab..32807f6 100644
--- a/frontend/src/app/auth/login/login.component.html
+++ b/frontend/src/app/auth/login/login.component.html
@@ -19,8 +19,6 @@
                   </div>
                   }
                 </ngx-slick-carousel>
-                  
-                  
               </div>
           </div>
           <!-- /Login Banner -->
@@ -35,21 +33,48 @@
                               <a [routerLink]="routes.home" class="link-1">Back to Home</a>
                           </div>
                           <h1 class="fs-32 fw-bold topic">Sign into Your Account</h1>
-                          <form (ngSubmit)="directIndex()" class="mb-3 pb-3">
+                          
+                          <!-- Error Message -->
+                          @if (errorMessage) {
+                            <div class="alert alert-danger" role="alert">
+                              {{ errorMessage }}
+                            </div>
+                          }
+                          
+                          <form [formGroup]="loginForm" (ngSubmit)="onSubmit()" class="mb-3 pb-3">
                               <div class="mb-3 position-relative">
                                   <label class="form-label">Email<span class="text-danger ms-1">*</span></label>
                                   <div class="position-relative">
-                                      <input type="email" class="form-control form-control-lg">
+                                      <input 
+                                        type="email" 
+                                        class="form-control form-control-lg"
+                                        formControlName="email"
+                                        [class.is-invalid]="isFieldInvalid('email')"
+                                        placeholder="Enter your email">
                                       <span><i class="isax isax-sms input-icon text-gray-7 fs-14"></i></span>
                                   </div>
+                                  @if (isFieldInvalid('email')) {
+                                    <div class="invalid-feedback d-block">
+                                      {{ getFieldError('email') }}
+                                    </div>
+                                  }
                               </div>
                               <div class="mb-3 position-relative">
                                   <label class="form-label">Password <span class="text-danger ms-1">*</span></label>
                                   <div class="position-relative" id="passwordInput">
-                                      <input [type]="password ? 'text' : 'password'" class="pass-inputs form-control form-control-lg">
+                                      <input 
+                                        [type]="password ? 'text' : 'password'" 
+                                        class="pass-inputs form-control form-control-lg"
+                                        formControlName="password"
+                                        [class.is-invalid]="isFieldInvalid('password')"
+                                        placeholder="Enter your password">
                                       <span tabindex="0" (click)="togglePassword()" (keydown.enter)="togglePassword()" class="isax toggle-passwords fs-14" [ngClass]="password ? 'isax-eye' : 'isax-eye-slash'"></span>
-                                  </div>	
-                                  
+                                  </div>
+                                  @if (isFieldInvalid('password')) {
+                                    <div class="invalid-feedback d-block">
+                                      {{ getFieldError('password') }}
+                                    </div>
+                                  }
                               </div>
                               <div class="d-flex align-items-center justify-content-between mb-4">
                                   <div class="remember-me d-flex align-items-center">
@@ -65,7 +90,17 @@
                                   </div>
                               </div>
                               <div class="d-grid">
-                                  <button class="btn btn-secondary btn-lg" type="submit">Login <i class="isax isax-arrow-right-3 ms-1"></i></button>
+                                  <button 
+                                    class="btn btn-secondary btn-lg" 
+                                    type="submit"
+                                    [disabled]="isLoading || loginForm.invalid">
+                                    @if (isLoading) {
+                                      <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
+                                      Signing in...
+                                    } @else {
+                                      Login <i class="isax isax-arrow-right-3 ms-1"></i>
+                                    }
+                                  </button>
                               </div>
                           </form>
 
diff --git a/frontend/src/app/auth/login/login.component.ts b/frontend/src/app/auth/login/login.component.ts
index 51dfe35..58b247a 100644
--- a/frontend/src/app/auth/login/login.component.ts
+++ b/frontend/src/app/auth/login/login.component.ts
@@ -1,6 +1,8 @@
 import { Component } from '@angular/core';
-import { DataService } from 'src/app/shared/service/data/data.service';
+import { FormBuilder, FormGroup, Validators } from '@angular/forms';
 import { Router } from '@angular/router';
+import { DataService } from 'src/app/shared/service/data/data.service';
+import { ApiService, LoginRequest } from 'src/app/shared/service/api/api.service';
 import { routes } from 'src/app/shared/service/routes/routes';
 import { welcomeLogin } from 'src/app/models/model';
 
@@ -13,44 +15,134 @@ import { welcomeLogin } from 'src/app/models/model';
 export class LoginComponent {
   public routes = routes;
   public welcomeLogin: welcomeLogin[] = [];
-  password: boolean = false; // Add more as needed
- 
+  public loginForm: FormGroup;
+  public isLoading = false;
+  public errorMessage = '';
+  password: boolean = false;
+
   togglePassword(): void {
-    this.password= !this.password;
+    this.password = !this.password;
   }
-  public authSlider ={
+
+  public authSlider = {
     dots: true,
-        infinite: false,
-        speed: 300,
-        slidesToShow: 1,
-        slidesToScroll: 1,
-        arrows: false,
-        rtl:true,
-        responsive: [
-          {
-          breakpoint: 1300,
-          settings: {
-            slidesToShow: 1,
-            slidesToScroll: 1,
-            infinite: true,
-            dots: true
-          }
-          },
-          {
-          breakpoint: 768,
-          settings: {
-            slidesToShow: 1,
-            slidesToScroll: 1
-          }
-          }
-        ]
-  }
-
-  constructor(private DataService: DataService, public router: Router) {
+    infinite: false,
+    speed: 300,
+    slidesToShow: 1,
+    slidesToScroll: 1,
+    arrows: false,
+    rtl: true,
+    responsive: [
+      {
+        breakpoint: 1300,
+        settings: {
+          slidesToShow: 1,
+          slidesToScroll: 1,
+          infinite: true,
+          dots: true
+        }
+      },
+      {
+        breakpoint: 768,
+        settings: {
+          slidesToShow: 1,
+          slidesToScroll: 1
+        }
+      }
+    ]
+  }
+
+  constructor(
+    private DataService: DataService,
+    private formBuilder: FormBuilder,
+    private apiService: ApiService,
+    public router: Router
+  ) {
     this.welcomeLogin = this.DataService.welcomeLogin;
+    this.initializeForm();
+  }
+
+  private initializeForm(): void {
+    this.loginForm = this.formBuilder.group({
+      email: ['', [Validators.required, Validators.email]],
+      password: ['', [Validators.required, Validators.minLength(6)]]
+    });
+  }
+
+  async onSubmit(): Promise<void> {
+    if (this.loginForm.invalid) {
+      this.markFormGroupTouched();
+      return;
+    }
+
+    this.isLoading = true;
+    this.errorMessage = '';
+
+    try {
+      const credentials: LoginRequest = {
+        email: this.loginForm.value.email,
+        password: this.loginForm.value.password
+      };
+
+      const response = await this.apiService.login(credentials);
+      
+      // Redirect based on user type/role
+      this.redirectUser(response.user);
+      
+    } catch (error: any) {
+      this.errorMessage = error.message || 'Login failed. Please try again.';
+    } finally {
+      this.isLoading = false;
+    }
+  }
+
+  private redirectUser(user: any): void {
+    // Redirect based on user type and role
+    switch (user.userType) {
+      case 'staff':
+        if (user.role === 'admin') {
+          this.router.navigate(['/admin/dashboard']);
+        } else {
+          this.router.navigate([routes.instructor_dashboard]);
+        }
+        break;
+      case 'student':
+        this.router.navigate(['/student/dashboard']);
+        break;
+      case 'parent':
+        this.router.navigate(['/parent/dashboard']);
+        break;
+      default:
+        this.router.navigate(['/dashboard']);
+    }
+  }
+
+  private markFormGroupTouched(): void {
+    Object.keys(this.loginForm.controls).forEach(key => {
+      const control = this.loginForm.get(key);
+      control?.markAsTouched();
+    });
+  }
+
+  // Helper methods for template
+  isFieldInvalid(fieldName: string): boolean {
+    const field = this.loginForm.get(fieldName);
+    return !!(field && field.invalid && field.touched);
   }
 
-  directIndex() {
-    this.router.navigate([routes.instructor_dashboard]);
+  getFieldError(fieldName: string): string {
+    const field = this.loginForm.get(fieldName);
+    if (field?.errors) {
+      if (field.errors['required']) {
+        return `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} is required`;
+      }
+      if (field.errors['email']) {
+        return 'Please enter a valid email address';
+      }
+      if (field.errors['minlength']) {
+        return `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} must be at least ${field.errors['minlength'].requiredLength} characters`;
+      }
+    }
+    return '';
   }
 }
diff --git a/frontend/src/app/auth/register/register.component.html b/frontend/src/app/auth/register/register.component.html
index c0274b3..5bb6ca4 100644
--- a/frontend/src/app/auth/register/register.component.html
+++ b/frontend/src/app/auth/register/register.component.html
@@ -19,14 +19,12 @@
                     </div>
                     }
                   </ngx-slick-carousel>
-                    
-                    
                 </div>
             </div>
             <!-- /Login Banner -->
   
             <div class="col-md-6 login-wrap-bg">
-                <!-- Login -->
+                <!-- Register -->
                 <div class="login-wrapper">
                     <div class="loginbox">
                         <div class="w-100">
@@ -34,38 +32,236 @@
                                 <img src="assets/img/logo.svg" class="img-fluid" alt="Logo">
                                 <a [routerLink]="routes.home" class="link-1">Back to Home</a>
                             </div>
-                            <h1 class="fs-32 fw-bold topic">Sign up</h1>
-                            <form (ngSubmit)="directIndex()" class="mb-3 pb-3">
-                                <div class="mb-3 position-relative">
-                                    <label class="form-label">Full Name<span class="text-danger ms-1">*</span></label>
-                                    <div class="position-relative">
-                                        <input type="text" class="form-control form-control-lg">
-                                        <span><i class="isax isax-user input-icon text-gray-7 fs-14"></i></span>
+                            <h1 class="fs-32 fw-bold topic">Create Your Account</h1>
+                            
+                            <!-- Error Message -->
+                            @if (errorMessage) {
+                              <div class="alert alert-danger" role="alert">
+                                {{ errorMessage }}
+                              </div>
+                            }
+                            
+                            <form [formGroup]="registerForm" (ngSubmit)="onSubmit()" class="mb-3 pb-3">
+                                <!-- User Type Selection -->
+                                <div class="mb-3">
+                                    <label class="form-label">I am a<span class="text-danger ms-1">*</span></label>
+                                    <div class="row">
+                                        <div class="col-6">
+                                            <div class="form-check">
+                                                <input 
+                                                  class="form-check-input" 
+                                                  type="radio" 
+                                                  formControlName="userType"
+                                                  value="student" 
+                                                  id="userTypeStudent">
+                                                <label class="form-check-label" for="userTypeStudent">
+                                                    Student
+                                                </label>
+                                            </div>
+                                        </div>
+                                        <div class="col-6">
+                                            <div class="form-check">
+                                                <input 
+                                                  class="form-check-input" 
+                                                  type="radio" 
+                                                  formControlName="userType"
+                                                  value="parent" 
+                                                  id="userTypeParent">
+                                                <label class="form-check-label" for="userTypeParent">
+                                                    Parent
+                                                </label>
+                                            </div>
+                                        </div>
+                                    </div>
+                                    @if (isFieldInvalid('userType')) {
+                                      <div class="invalid-feedback d-block">
+                                        {{ getFieldError('userType') }}
+                                      </div>
+                                    }
+                                </div>
+
+                                <!-- Basic Information -->
+                                <div class="row">
+                                    <div class="col-md-6">
+                                        <div class="mb-3 position-relative">
+                                            <label class="form-label">First Name<span class="text-danger ms-1">*</span></label>
+                                            <div class="position-relative">
+                                                <input 
+                                                  type="text" 
+                                                  class="form-control form-control-lg"
+                                                  formControlName="firstName"
+                                                  [class.is-invalid]="isFieldInvalid('firstName')"
+                                                  placeholder="Enter your first name">
+                                                <span><i class="isax isax-user input-icon text-gray-7 fs-14"></i></span>
+                                            </div>
+                                            @if (isFieldInvalid('firstName')) {
+                                              <div class="invalid-feedback d-block">
+                                                {{ getFieldError('firstName') }}
+                                              </div>
+                                            }
+                                        </div>
+                                    </div>
+                                    <div class="col-md-6">
+                                        <div class="mb-3 position-relative">
+                                            <label class="form-label">Last Name<span class="text-danger ms-1">*</span></label>
+                                            <div class="position-relative">
+                                                <input 
+                                                  type="text" 
+                                                  class="form-control form-control-lg"
+                                                  formControlName="lastName"
+                                                  [class.is-invalid]="isFieldInvalid('lastName')"
+                                                  placeholder="Enter your last name">
+                                                <span><i class="isax isax-user input-icon text-gray-7 fs-14"></i></span>
+                                            </div>
+                                            @if (isFieldInvalid('lastName')) {
+                                              <div class="invalid-feedback d-block">
+                                                {{ getFieldError('lastName') }}
+                                              </div>
+                                            }
+                                        </div>
                                     </div>
                                 </div>
+
                                 <div class="mb-3 position-relative">
                                     <label class="form-label">Email<span class="text-danger ms-1">*</span></label>
                                     <div class="position-relative">
-                                        <input type="email" class="form-control form-control-lg">
+                                        <input 
+                                          type="email" 
+                                          class="form-control form-control-lg"
+                                          formControlName="email"
+                                          [class.is-invalid]="isFieldInvalid('email')"
+                                          placeholder="Enter your email">
                                         <span><i class="isax isax-sms input-icon text-gray-7 fs-14"></i></span>
                                     </div>
+                                    @if (isFieldInvalid('email')) {
+                                      <div class="invalid-feedback d-block">
+                                        {{ getFieldError('email') }}
+                                      </div>
+                                    }
                                 </div>
+
+                                <!-- Student-specific fields -->
+                                @if (selectedUserType === 'student') {
+                                  <div class="student-fields">
+                                    <div class="row">
+                                      <div class="col-md-6">
+                                        <div class="mb-3 position-relative">
+                                          <label class="form-label">Student ID<span class="text-danger ms-1">*</span></label>
+                                          <div class="position-relative">
+                                            <input 
+                                              type="text" 
+                                              class="form-control form-control-lg"
+                                              formControlName="studentId"
+                                              [class.is-invalid]="isFieldInvalid('studentId')"
+                                              placeholder="Enter student ID">
+                                            <span><i class="isax isax-card input-icon text-gray-7 fs-14"></i></span>
+                                          </div>
+                                          @if (isFieldInvalid('studentId')) {
+                                            <div class="invalid-feedback d-block">
+                                              {{ getFieldError('studentId') }}
+                                            </div>
+                                          }
+                                        </div>
+                                      </div>
+                                      <div class="col-md-6">
+                                        <div class="mb-3 position-relative">
+                                          <label class="form-label">Grade</label>
+                                          <div class="position-relative">
+                                            <input 
+                                              type="text" 
+                                              class="form-control form-control-lg"
+                                              formControlName="grade"
+                                              placeholder="Enter grade (e.g., Grade 5)">
+                                            <span><i class="isax isax-book input-icon text-gray-7 fs-14"></i></span>
+                                          </div>
+                                        </div>
+                                      </div>
+                                    </div>
+                                    <div class="mb-3 position-relative">
+                                      <label class="form-label">Date of Birth</label>
+                                      <div class="position-relative">
+                                        <input 
+                                          type="date" 
+                                          class="form-control form-control-lg"
+                                          formControlName="dateOfBirth">
+                                      </div>
+                                    </div>
+                                    <div class="mb-3">
+                                      <div class="form-check">
+                                        <input 
+                                          class="form-check-input" 
+                                          type="checkbox" 
+                                          formControlName="canLoginDirectly"
+                                          id="canLoginDirectly">
+                                        <label class="form-check-label" for="canLoginDirectly">
+                                          Allow direct login (without parent supervision)
+                                        </label>
+                                      </div>
+                                    </div>
+                                  </div>
+                                }
+
+                                <!-- Parent-specific fields -->
+                                @if (selectedUserType === 'parent') {
+                                  <div class="parent-fields">
+                                    <div class="row">
+                                      <div class="col-md-6">
+                                        <div class="mb-3 position-relative">
+                                          <label class="form-label">Phone Number</label>
+                                          <div class="position-relative">
+                                            <input 
+                                              type="tel" 
+                                              class="form-control form-control-lg"
+                                              formControlName="phone"
+                                              placeholder="Enter phone number">
+                                            <span><i class="isax isax-call input-icon text-gray-7 fs-14"></i></span>
+                                          </div>
+                                        </div>
+                                      </div>
+                                      <div class="col-md-6">
+                                        <div class="mb-3">
+                                          <label class="form-label">Relationship<span class="text-danger ms-1">*</span></label>
+                                          <select 
+                                            class="form-select form-control-lg"
+                                            formControlName="relationship"
+                                            [class.is-invalid]="isFieldInvalid('relationship')">
+                                            <option value="">Select relationship</option>
+                                            <option value="father">Father</option>
+                                            <option value="mother">Mother</option>
+                                            <option value="guardian">Guardian</option>
+                                            <option value="other">Other</option>
+                                          </select>
+                                          @if (isFieldInvalid('relationship')) {
+                                            <div class="invalid-feedback d-block">
+                                              {{ getFieldError('relationship') }}
+                                            </div>
+                                          }
+                                        </div>
+                                      </div>
+                                    </div>
+                                  </div>
+                                }
+
+                                <!-- Password fields -->
                                 <div class="mb-3 position-relative">
-                                    <label class="form-label">New Password <span class="text-danger"> *</span></label>
+                                    <label class="form-label">Password <span class="text-danger"> *</span></label>
                                     <div id="passwordInput" class="pass-group">
                                         <div class="pass-group mb-3">
                                             <input
-                                          [type]="password[0] ? 'text' : 'password'"
-                                          id="password"
-                                          class="pass-input form-control form-control-lg"
-                                          (input)="checkPasswordStrength($event)"
-                                        />
-                                        <span class="isax toggle-password fs-14"
-                                            [ngClass]="password[0] ? 'isax-eye' : 'isax-eye-slash'"
-                                            (click)="togglePassword(0)"
-                                            (keydown.enter)="togglePassword(0)"
-                                            tabindex="0"
-                                            ></span>
+                                              [type]="password[0] ? 'text' : 'password'"
+                                              id="password"
+                                              class="pass-input form-control form-control-lg"
+                                              formControlName="password"
+                                              [class.is-invalid]="isFieldInvalid('password')"
+                                              (input)="checkPasswordStrength($event)"
+                                              placeholder="Enter your password"
+                                            />
+                                            <span class="isax toggle-password fs-14"
+                                                [ngClass]="password[0] ? 'isax-eye' : 'isax-eye-slash'"
+                                                (click)="togglePassword(0)"
+                                                (keydown.enter)="togglePassword(0)"
+                                                tabindex="0"
+                                                ></span>
                                         </div>
                                         <div id="passwordStrength" class="strength-meter password-strength" [ngClass]="{'poor-active':strengthLevel === 'poor','avg-active':strengthLevel === 'weak','strong-active':strengthLevel === 'strong','heavy-active':strengthLevel === 'heavy'}" >
                                           <span id="poor" [ngClass]="{'active': strengthLevel === 'poor'||strengthLevel === 'weak'||strengthLevel === 'strong'||strengthLevel === 'heavy'}"></span>
@@ -73,40 +269,60 @@
                                           <span id="strong" [ngClass]="{'active': strengthLevel === 'strong'||strengthLevel === 'heavy'}"></span>
                                           <span id="heavy" [ngClass]="{'active': strengthLevel === 'heavy'}"></span>
                                         </div>
-                                       
-                                      </div>
-                                      <div id="passwordInfo" class="mt-2">
-                                        <span *ngIf="strengthLevel === 'poor'" class="d-flex align-items-center text-danger fs-15 fw-semibold">
-                                          <img src="assets/img/icon/angry.svg" class="me-2">Weak. Must contain at least 8 characters
-                                        </span>
-                                        <span *ngIf="strengthLevel === ('poor'&&'weak')" class="d-flex align-items-center text-warning fs-15 fw-semibold">
-                                          <img src="assets/img/icon/anguish.svg" class="me-2">Average. Must contain at least 1 letter or number
-                                        </span>
-                                        <span *ngIf="strengthLevel === ('poor'&&'weak'&&'strong')" class="d-flex align-items-center text-blueL fs-15 fw-semibold">
-                                          <img src="assets/img/icon/smile.svg" class="me-2">Almost. Must contain special symbol
-                                        </span>
-                                        <span *ngIf="strengthLevel === ('poor'&&'weak'&&'strong'&&'heavy')" class="d-flex align-items-center text-success fs-15 fw-semibold">
-                                          <img src="assets/img/icon/smile.svg" class="me-2">Awesome! You have a secure password.
+                                    </div>
+                                    <div id="passwordInfo" class="mt-2">
+                                      @if (passwordInfoMessage) {
+                                        <span class="d-flex align-items-center fs-15 fw-semibold" [style.color]="passwordInfoColor">
+                                          {{ passwordInfoMessage }}
                                         </span>
+                                      }
+                                    </div>
+                                    @if (isFieldInvalid('password')) {
+                                      <div class="invalid-feedback d-block">
+                                        {{ getFieldError('password') }}
                                       </div>
+                                    }
                                 </div>
+
                                 <div class="mb-3 position-relative">
                                     <label class="form-label">Confirm Password <span class="text-danger"> *</span></label>
-                                    <div class="position-relative" id="passwordInput">
-                                        <input [type]="password[1] ? 'text' : 'password'" class="pass-inputs form-control form-control-lg">
+                                    <div class="position-relative" id="confirmPasswordInput">
+                                        <input 
+                                          [type]="password[1] ? 'text' : 'password'" 
+                                          class="pass-inputs form-control form-control-lg"
+                                          formControlName="confirmPassword"
+                                          [class.is-invalid]="isFieldInvalid('confirmPassword')"
+                                          placeholder="Confirm your password">
                                         <span tabindex="0" (click)="togglePassword(1)" (keydown.enter)="togglePassword(1)" class="isax toggle-passwords fs-14" [ngClass]="password[1] ? 'isax-eye' : 'isax-eye-slash'"></span>
                                     </div>
+                                    @if (isFieldInvalid('confirmPassword')) {
+                                      <div class="invalid-feedback d-block">
+                                        {{ getFieldError('confirmPassword') }}
+                                      </div>
+                                    }
                                 </div>
+
                                 <div class="d-flex align-items-center justify-content-between mb-4">
                                     <div class="remember-me d-flex align-items-center">
-                                            <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
+                                            <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" required>
                                             <label class="form-check-label mb-0 d-inline-flex remember-me fs-14" for="flexCheckDefault">
                                                 I agree with <a href="javascript:void(0);" class="link-2 mx-2">Terms of Service</a> and <a href="javascript:void(0);" class="link-2 mx-2">Privacy Policy</a> 
                                             </label>
                                     </div>
                                 </div>
+
                                 <div class="d-grid">
-                                    <button class="btn btn-secondary btn-lg" type="submit">Sign Up <i class="isax isax-arrow-right-3 ms-1"></i></button>
+                                    <button 
+                                      class="btn btn-secondary btn-lg" 
+                                      type="submit"
+                                      [disabled]="isLoading || registerForm.invalid">
+                                      @if (isLoading) {
+                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
+                                        Creating account...
+                                      } @else {
+                                        Sign Up <i class="isax isax-arrow-right-3 ms-1"></i>
+                                      }
+                                    </button>
                                 </div>
                             </form>
 
@@ -120,10 +336,10 @@
                             </div>
 
                             <div class="fs-14 fw-normal d-flex align-items-center justify-content-center">
-                                Already you have an account?<a [routerLink]="routes.login" class="link-2 ms-1"> Login</a>
+                                Already have an account?<a [routerLink]="routes.login" class="link-2 ms-1"> Login</a>
                             </div>
 
-                            <!-- /Login -->
+                            <!-- /Register -->
 
                         </div>
                     </div>
@@ -131,4 +347,5 @@
             </div>
         </div>
     </div>
-  </div>
\ No newline at end of file
+</div>
+
diff --git a/frontend/src/app/auth/register/register.component.ts b/frontend/src/app/auth/register/register.component.ts
index 556d440..3542087 100644
--- a/frontend/src/app/auth/register/register.component.ts
+++ b/frontend/src/app/auth/register/register.component.ts
@@ -1,7 +1,9 @@
 import { Component } from '@angular/core';
+import { FormBuilder, FormGroup, Validators } from '@angular/forms';
 import { Router } from '@angular/router';
 import { welcomeLogin } from 'src/app/models/model';
 import { DataService } from 'src/app/shared/service/data/data.service';
+import { ApiService, RegisterRequest } from 'src/app/shared/service/api/api.service';
 import { routes } from 'src/app/shared/service/routes/routes';
 
 @Component({
@@ -11,107 +13,284 @@ import { routes } from 'src/app/shared/service/routes/routes';
   styleUrl: './register.component.scss'
 })
 export class RegisterComponent {
-routes=routes;
- public welcomeLogin: welcomeLogin[] = [];
-   password: boolean[] = [false]; // Add more as needed
-  
-   togglePassword(index:number): void {
-     this.password[index]= !this.password[index];
-   }
-   public authSlider ={
-     dots: true,
-         infinite: false,
-         speed: 300,
-         slidesToShow: 1,
-         slidesToScroll: 1,
-         arrows: false,
-         rtl:true,
-         responsive: [
-           {
-           breakpoint: 1300,
-           settings: {
-             slidesToShow: 1,
-             slidesToScroll: 1,
-             infinite: true,
-             dots: true
-           }
-           },
-           {
-           breakpoint: 768,
-           settings: {
-             slidesToShow: 1,
-             slidesToScroll: 1
-           }
-           }
-         ]
-   }
- 
-   constructor(private DataService: DataService, public router: Router) {
-     this.welcomeLogin = this.DataService.welcomeLogin;
-   }
- 
-   directIndex() {
-     this.router.navigate([routes.login]);
-   }
-   passwordValue: string = '';
-   strengthLevel: string = '';
-   passwordInfoMessage: string | null = null;
-   passwordInfoColor: string = '';
- 
-   private poorRegExp = /[a-z]/;
-   private weakRegExp = /(?=.*?[0-9])/;
-   private strongRegExp = /(?=.*?[#?!@$%^&*-])/;
-   private whitespaceRegExp = /^$|\s+/;
- 
-   checkPasswordStrength(event: Event): void {
-     const inputElement = event.target as HTMLInputElement;
-     const password = inputElement.value;
-     this.passwordValue = password;
-   
-     const passwordLength = password.length;
-     const hasPoor = this.poorRegExp.test(password);
-     const hasWeak = this.weakRegExp.test(password);
-     const hasStrong = this.strongRegExp.test(password);
-     const hasWhitespace = this.whitespaceRegExp.test(password);
-   
-     if (password === '') {
-       this.resetStrength();
-       return;
-     }
-   
-     if (hasWhitespace) {
-       this.passwordInfoMessage = 'Whitespaces are not allowed';
-       this.passwordInfoColor = 'red';
-       this.strengthLevel = '';
-       return;
-     }
-   
-     if (passwordLength < 8) {
-       this.strengthLevel = 'poor';
-       this.passwordInfoMessage = 'Weak. Must contain at least 8 characters.';
-       this.passwordInfoColor = 'red';
-     } else if (hasPoor || hasWeak || hasStrong) {
-       this.strengthLevel = 'weak';
-       this.passwordInfoMessage = 'Average. Must contain at least 1 letter or number.';
-       this.passwordInfoColor = '#FFB54A';
-     }
-   
-     if (passwordLength >= 8 && hasPoor && (hasWeak || hasStrong)) {
-       this.strengthLevel = 'strong';
-       this.passwordInfoMessage = 'Almost strong. Must contain a special symbol.';
-       this.passwordInfoColor = '#1D9CFD';
-     }
-   
-     if (passwordLength >= 8 && hasPoor && hasWeak && hasStrong) {
-       this.strengthLevel = 'heavy';
-       this.passwordInfoMessage = 'Awesome! You have a secure password.';
-       this.passwordInfoColor = '#159F46';
-     }
-   }
-   
- 
-   private resetStrength(): void {
-     this.strengthLevel = '';
-     this.passwordInfoMessage = null;
-   }
+  routes = routes;
+  public welcomeLogin: welcomeLogin[] = [];
+  public registerForm: FormGroup;
+  public isLoading = false;
+  public errorMessage = '';
+  password: boolean[] = [false, false]; // For password and confirm password
+
+  togglePassword(index: number): void {
+    this.password[index] = !this.password[index];
+  }
+
+  public authSlider = {
+    dots: true,
+    infinite: false,
+    speed: 300,
+    slidesToShow: 1,
+    slidesToScroll: 1,
+    arrows: false,
+    rtl: true,
+    responsive: [
+      {
+        breakpoint: 1300,
+        settings: {
+          slidesToShow: 1,
+          slidesToScroll: 1,
+          infinite: true,
+          dots: true
+        }
+      },
+      {
+        breakpoint: 768,
+        settings: {
+          slidesToShow: 1,
+          slidesToScroll: 1
+        }
+      }
+    ]
+  }
+
+  constructor(
+    private DataService: DataService,
+    private formBuilder: FormBuilder,
+    private apiService: ApiService,
+    public router: Router
+  ) {
+    this.welcomeLogin = this.DataService.welcomeLogin;
+    this.initializeForm();
+  }
+
+  private initializeForm(): void {
+    this.registerForm = this.formBuilder.group({
+      email: ['', [Validators.required, Validators.email]],
+      password: ['', [Validators.required, Validators.minLength(6)]],
+      confirmPassword: ['', [Validators.required]],
+      firstName: ['', [Validators.required, Validators.minLength(2)]],
+      lastName: ['', [Validators.required, Validators.minLength(2)]],
+      userType: ['', [Validators.required]],
+      // Student-specific fields
+      studentId: [''],
+      dateOfBirth: [''],
+      grade: [''],
+      canLoginDirectly: [false],
+      // Parent-specific fields
+      phone: [''],
+      relationship: ['']
+    }, { validators: this.passwordMatchValidator });
+
+    // Watch userType changes to set conditional validators
+    this.registerForm.get('userType')?.valueChanges.subscribe(userType => {
+      this.updateValidators(userType);
+    });
+  }
+
+  private passwordMatchValidator(form: FormGroup) {
+    const password = form.get('password');
+    const confirmPassword = form.get('confirmPassword');
+    
+    if (password && confirmPassword && password.value !== confirmPassword.value) {
+      confirmPassword.setErrors({ passwordMismatch: true });
+      return { passwordMismatch: true };
+    }
+    
+    if (confirmPassword?.hasError('passwordMismatch')) {
+      delete confirmPassword.errors['passwordMismatch'];
+      if (Object.keys(confirmPassword.errors || {}).length === 0) {
+        confirmPassword.setErrors(null);
+      }
+    }
+    
+    return null;
+  }
+
+  private updateValidators(userType: string): void {
+    const studentIdControl = this.registerForm.get('studentId');
+    const relationshipControl = this.registerForm.get('relationship');
+
+    // Clear existing validators
+    studentIdControl?.clearValidators();
+    relationshipControl?.clearValidators();
+
+    if (userType === 'student') {
+      studentIdControl?.setValidators([Validators.required]);
+    } else if (userType === 'parent') {
+      relationshipControl?.setValidators([Validators.required]);
+    }
+
+    studentIdControl?.updateValueAndValidity();
+    relationshipControl?.updateValueAndValidity();
+  }
+
+  async onSubmit(): Promise<void> {
+    if (this.registerForm.invalid) {
+      this.markFormGroupTouched();
+      return;
+    }
+
+    this.isLoading = true;
+    this.errorMessage = '';
+
+    try {
+      const formValue = this.registerForm.value;
+      const userData: RegisterRequest = {
+        email: formValue.email,
+        password: formValue.password,
+        firstName: formValue.firstName,
+        lastName: formValue.lastName,
+        userType: formValue.userType
+      };
+
+      // Add user-type specific fields
+      if (formValue.userType === 'student') {
+        userData.studentId = formValue.studentId;
+        userData.dateOfBirth = formValue.dateOfBirth;
+        userData.grade = formValue.grade;
+        userData.canLoginDirectly = formValue.canLoginDirectly;
+      } else if (formValue.userType === 'parent') {
+        userData.phone = formValue.phone;
+        userData.relationship = formValue.relationship;
+      }
+
+      const response = await this.apiService.register(userData);
+      
+      // Redirect based on user type
+      this.redirectUser(response.user);
+      
+    } catch (error: any) {
+      this.errorMessage = error.message || 'Registration failed. Please try again.';
+    } finally {
+      this.isLoading = false;
+    }
+  }
+
+  private redirectUser(user: any): void {
+    // Redirect based on user type
+    switch (user.userType) {
+      case 'student':
+        this.router.navigate(['/student/dashboard']);
+        break;
+      case 'parent':
+        this.router.navigate(['/parent/dashboard']);
+        break;
+      default:
+        this.router.navigate(['/dashboard']);
+    }
+  }
+
+  private markFormGroupTouched(): void {
+    Object.keys(this.registerForm.controls).forEach(key => {
+      const control = this.registerForm.get(key);
+      control?.markAsTouched();
+    });
+  }
+
+  // Helper methods for template
+  isFieldInvalid(fieldName: string): boolean {
+    const field = this.registerForm.get(fieldName);
+    return !!(field && field.invalid && field.touched);
+  }
+
+  getFieldError(fieldName: string): string {
+    const field = this.registerForm.get(fieldName);
+    if (field?.errors) {
+      if (field.errors['required']) {
+        return `${this.getFieldDisplayName(fieldName)} is required`;
+      }
+      if (field.errors['email']) {
+        return 'Please enter a valid email address';
+      }
+      if (field.errors['minlength']) {
+        return `${this.getFieldDisplayName(fieldName)} must be at least ${field.errors['minlength'].requiredLength} characters`;
+      }
+      if (field.errors['passwordMismatch']) {
+        return 'Passwords do not match';
+      }
+    }
+    return '';
+  }
+
+  private getFieldDisplayName(fieldName: string): string {
+    const displayNames: { [key: string]: string } = {
+      email: 'Email',
+      password: 'Password',
+      confirmPassword: 'Confirm Password',
+      firstName: 'First Name',
+      lastName: 'Last Name',
+      userType: 'User Type',
+      studentId: 'Student ID',
+      dateOfBirth: 'Date of Birth',
+      grade: 'Grade',
+      phone: 'Phone Number',
+      relationship: 'Relationship'
+    };
+    return displayNames[fieldName] || fieldName;
+  }
+
+  get selectedUserType(): string {
+    return this.registerForm.get('userType')?.value || '';
+  }
+
+  // Password strength validation
+  passwordValue: string = '';
+  strengthLevel: string = '';
+  passwordInfoMessage: string | null = null;
+  passwordInfoColor: string = '';
+
+  private poorRegExp = /[a-z]/;
+  private weakRegExp = /(?=.*?[0-9])/;
+  private strongRegExp = /(?=.*?[#?!@$%^&*-])/;
+  private whitespaceRegExp = /^$|\s+/;
+
+  checkPasswordStrength(event: Event): void {
+    const inputElement = event.target as HTMLInputElement;
+    const password = inputElement.value;
+    this.passwordValue = password;
+
+    const passwordLength = password.length;
+    const hasPoor = this.poorRegExp.test(password);
+    const hasWeak = this.weakRegExp.test(password);
+    const hasStrong = this.strongRegExp.test(password);
+    const hasWhitespace = this.whitespaceRegExp.test(password);
+
+    if (password === '') {
+      this.resetStrength();
+      return;
+    }
+
+    if (hasWhitespace) {
+      this.passwordInfoMessage = 'Whitespaces are not allowed';
+      this.passwordInfoColor = 'red';
+      this.strengthLevel = '';
+      return;
+    }
+
+    if (passwordLength < 8) {
+      this.strengthLevel = 'poor';
+      this.passwordInfoMessage = 'Weak. Must contain at least 8 characters.';
+      this.passwordInfoColor = 'red';
+    } else if (hasPoor || hasWeak || hasStrong) {
+      this.strengthLevel = 'weak';
+      this.passwordInfoMessage = 'Average. Must contain at least 1 letter or number.';
+      this.passwordInfoColor = '#FFB54A';
+    }
+
+    if (passwordLength >= 8 && hasPoor && (hasWeak || hasStrong)) {
+      this.strengthLevel = 'strong';
+      this.passwordInfoMessage = 'Almost strong. Must contain a special symbol.';
+      this.passwordInfoColor = '#1D9CFD';
+    }
+
+    if (passwordLength >= 8 && hasPoor && hasWeak && hasStrong) {
+      this.strengthLevel = 'heavy';
+      this.passwordInfoMessage = 'Awesome! You have a secure password.';
+      this.passwordInfoColor = '#159F46';
+    }
+  }
+
+  private resetStrength(): void {
+    this.strengthLevel = '';
+    this.passwordInfoMessage = null;
+  }
 }
diff --git a/frontend/src/app/shared/service/api/api.service.ts b/frontend/src/app/shared/service/api/api.service.ts
new file mode 100644
index 0000000..0e6ef6d
--- /dev/null
+++ b/frontend/src/app/shared/service/api/api.service.ts
@@ -0,0 +1,219 @@
+import { Injectable } from '@angular/core';
+import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
+
+export interface LoginRequest {
+  email: string;
+  password: string;
+}
+
+export interface RegisterRequest {
+  email: string;
+  password: string;
+  firstName: string;
+  lastName: string;
+  userType: 'student' | 'parent';
+  // Student-specific fields
+  studentId?: string;
+  dateOfBirth?: string;
+  grade?: string;
+  canLoginDirectly?: boolean;
+  // Parent-specific fields
+  phone?: string;
+  relationship?: 'father' | 'mother' | 'guardian' | 'other';
+}
+
+export interface AuthResponse {
+  access_token: string;
+  user: {
+    id: string;
+    email: string;
+    firstName: string;
+    lastName: string;
+    userType: string;
+    role: string;
+    claims: string[];
+    frontendRoutes: string[];
+    canManageStudents?: string[];
+  };
+}
+
+@Injectable({
+  providedIn: 'root'
+})
+export class ApiService {
+  private axiosInstance: AxiosInstance;
+  private readonly baseURL = 'http://localhost:3000'; // Update this to match your backend URL
+
+  constructor() {
+    this.axiosInstance = axios.create({
+      baseURL: this.baseURL,
+      timeout: 10000,
+      headers: {
+        'Content-Type': 'application/json',
+      },
+    });
+
+    this.setupInterceptors();
+  }
+
+  private setupInterceptors(): void {
+    // Request interceptor to add JWT token
+    this.axiosInstance.interceptors.request.use(
+      (config) => {
+        const token = this.getToken();
+        if (token) {
+          config.headers.Authorization = `Bearer ${token}`;
+        }
+        return config;
+      },
+      (error) => {
+        return Promise.reject(error);
+      }
+    );
+
+    // Response interceptor to handle token expiration
+    this.axiosInstance.interceptors.response.use(
+      (response) => {
+        return response;
+      },
+      (error) => {
+        if (error.response?.status === 401) {
+          // Token expired or invalid
+          this.removeToken();
+          // Redirect to login page
+          window.location.href = '/auth/login';
+        }
+        return Promise.reject(error);
+      }
+    );
+  }
+
+  private getToken(): string | null {
+    return localStorage.getItem('access_token');
+  }
+
+  private setToken(token: string): void {
+    localStorage.setItem('access_token', token);
+  }
+
+  private removeToken(): void {
+    localStorage.removeItem('access_token');
+    localStorage.removeItem('user');
+  }
+
+  // Authentication methods
+  async login(credentials: LoginRequest): Promise<AuthResponse> {
+    try {
+      const response: AxiosResponse<AuthResponse> = await this.axiosInstance.post('/auth/login', credentials);
+      const { access_token, user } = response.data;
+      
+      // Store token and user data
+      this.setToken(access_token);
+      localStorage.setItem('user', JSON.stringify(user));
+      
+      return response.data;
+    } catch (error) {
+      throw this.handleError(error);
+    }
+  }
+
+  async register(userData: RegisterRequest): Promise<AuthResponse> {
+    try {
+      const response: AxiosResponse<AuthResponse> = await this.axiosInstance.post('/auth/register', userData);
+      const { access_token, user } = response.data;
+      
+      // Store token and user data
+      this.setToken(access_token);
+      localStorage.setItem('user', JSON.stringify(user));
+      
+      return response.data;
+    } catch (error) {
+      throw this.handleError(error);
+    }
+  }
+
+  async getProfile(): Promise<any> {
+    try {
+      const response = await this.axiosInstance.get('/auth/profile');
+      return response.data;
+    } catch (error) {
+      throw this.handleError(error);
+    }
+  }
+
+  logout(): void {
+    this.removeToken();
+    window.location.href = '/auth/login';
+  }
+
+  isAuthenticated(): boolean {
+    const token = this.getToken();
+    if (!token) return false;
+
+    try {
+      // Basic token validation (you might want to add JWT decode and expiry check)
+      const payload = JSON.parse(atob(token.split('.')[1]));
+      const currentTime = Date.now() / 1000;
+      return payload.exp > currentTime;
+    } catch {
+      return false;
+    }
+  }
+
+  getCurrentUser(): any {
+    const userStr = localStorage.getItem('user');
+    return userStr ? JSON.parse(userStr) : null;
+  }
+
+  // Generic HTTP methods
+  async get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {
+    try {
+      const response: AxiosResponse<T> = await this.axiosInstance.get(url, config);
+      return response.data;
+    } catch (error) {
+      throw this.handleError(error);
+    }
+  }
+
+  async post<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
+    try {
+      const response: AxiosResponse<T> = await this.axiosInstance.post(url, data, config);
+      return response.data;
+    } catch (error) {
+      throw this.handleError(error);
+    }
+  }
+
+  async put<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
+    try {
+      const response: AxiosResponse<T> = await this.axiosInstance.put(url, data, config);
+      return response.data;
+    } catch (error) {
+      throw this.handleError(error);
+    }
+  }
+
+  async delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> {
+    try {
+      const response: AxiosResponse<T> = await this.axiosInstance.delete(url, config);
+      return response.data;
+    } catch (error) {
+      throw this.handleError(error);
+    }
+  }
+
+  private handleError(error: any): Error {
+    if (error.response) {
+      // Server responded with error status
+      const message = error.response.data?.message || error.response.statusText || 'An error occurred';
+      return new Error(message);
+    } else if (error.request) {
+      // Request was made but no response received
+      return new Error('Network error. Please check your connection.');
+    } else {
+      // Something else happened
+      return new Error(error.message || 'An unexpected error occurred');
+    }
+  }
+}
+
diff --git a/todo.md b/todo.md
new file mode 100644
index 0000000..ce5ab78
--- /dev/null
+++ b/todo.md
@@ -0,0 +1,20 @@
+# School Management System Authentication Changes
+
+## Backend Changes
+- [x] Remove loginAsStudent field from LoginDto
+- [x] Update RegisterDto to restrict user types to STUDENT and PARENT only
+- [x] Update auth service to remove loginAsStudent logic
+- [x] Update auth controller documentation
+
+## Frontend Changes
+- [x] Create axios instance with JWT interceptor
+- [x] Implement proper login component with API integration
+- [x] Implement proper register component with API integration
+- [x] Add user type selection (STUDENT/PARENT only) to registration
+- [x] Add email field to registration form
+- [x] Update auth routing and modules
+
+## Testing and Deployment
+- [ ] Test the authentication flow
+- [ ] Create git patch with all changes
+
-- 
2.34.1


From 2a170f55d97ae7933950fbe352f1ec73a907a269 Mon Sep 17 00:00:00 2001
From: Developer <developer@example.com>
Date: Mon, 14 Jul 2025 14:06:33 -0400
Subject: [PATCH 2/2] fix: Resolve TypeScript compilation errors in auth
 components

- Fix null safety issue in passwordMatchValidator
- Ensure proper initialization of form properties in constructor
- Resolve TS2564 and TS18047 compilation errors
---
 frontend/src/app/auth/login/login.component.ts       |  2 +-
 frontend/src/app/auth/register/register.component.ts | 12 ++++++++----
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/frontend/src/app/auth/login/login.component.ts b/frontend/src/app/auth/login/login.component.ts
index 58b247a..e323fd8 100644
--- a/frontend/src/app/auth/login/login.component.ts
+++ b/frontend/src/app/auth/login/login.component.ts
@@ -15,7 +15,7 @@ import { welcomeLogin } from 'src/app/models/model';
 export class LoginComponent {
   public routes = routes;
   public welcomeLogin: welcomeLogin[] = [];
-  public loginForm: FormGroup;
+  public loginForm!: FormGroup; // Use definite assignment assertion
   public isLoading = false;
   public errorMessage = '';
   password: boolean = false;
diff --git a/frontend/src/app/auth/register/register.component.ts b/frontend/src/app/auth/register/register.component.ts
index 3542087..728102f 100644
--- a/frontend/src/app/auth/register/register.component.ts
+++ b/frontend/src/app/auth/register/register.component.ts
@@ -15,7 +15,7 @@ import { routes } from 'src/app/shared/service/routes/routes';
 export class RegisterComponent {
   routes = routes;
   public welcomeLogin: welcomeLogin[] = [];
-  public registerForm: FormGroup;
+  public registerForm!: FormGroup; // Use definite assignment assertion
   public isLoading = false;
   public errorMessage = '';
   password: boolean[] = [false, false]; // For password and confirm password
@@ -95,10 +95,14 @@ export class RegisterComponent {
       return { passwordMismatch: true };
     }
     
+    // Fix null safety issue
     if (confirmPassword?.hasError('passwordMismatch')) {
-      delete confirmPassword.errors['passwordMismatch'];
-      if (Object.keys(confirmPassword.errors || {}).length === 0) {
-        confirmPassword.setErrors(null);
+      const errors = confirmPassword.errors;
+      if (errors) {
+        delete errors['passwordMismatch'];
+        if (Object.keys(errors).length === 0) {
+          confirmPassword.setErrors(null);
+        }
       }
     }
     
-- 
2.34.1

